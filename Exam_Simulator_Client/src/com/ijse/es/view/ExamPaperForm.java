/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.es.view;

import com.ijse.es.connector.ServerConnector;
import com.ijse.es.controller.AnswerController;
import com.ijse.es.controller.ExamDetailsController;
import com.ijse.es.controller.OptionController;
import com.ijse.es.controller.QuestionController;
import com.ijse.es.controller.TemporaryController;
import com.ijse.es.dto.AnswerDTO;
import com.ijse.es.dto.ExamDTO;
import com.ijse.es.dto.ExamDetailsDTO;
import com.ijse.es.dto.OptionDTO;
import com.ijse.es.dto.QuestionDTO;
import com.ijse.es.dto.StudentDTO;
import com.ijse.es.dto.TemporaryDTO;
import java.awt.Color;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class ExamPaperForm extends javax.swing.JFrame {

    /**
     * Creates new form ExamPaperForm
     */
    private final ExamDTO examDTO;
    private StudentDTO studentDTO;
    private String paprID = "P1";
    ArrayList<ExamDetailsDTO> examPaperList = new ArrayList<>();
    ArrayList<OptionDTO> optionList = new ArrayList<>();
    int qNum = 0, allQuestion = 0;
    String[] options = new String[4];
    String[] setOption = new String[4];
    int marksP = 0, marksN = 0;
     DefaultListModel<String> listModel;

    public ExamPaperForm(ExamDTO examDTO, StudentDTO studentDTO) {
        initComponents();
        this.examDTO = examDTO;
        this.studentDTO = studentDTO;
        getPaperID();
        content();

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblEnd1 = new javax.swing.JLabel();
        lblStart1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        lblEnd = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        lblQuestionNum = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblCancel = new javax.swing.JLabel();
        rbtnAns1 = new javax.swing.JRadioButton();
        rbtnAns2 = new javax.swing.JRadioButton();
        rbtnAns4 = new javax.swing.JRadioButton();
        rbtnAns3 = new javax.swing.JRadioButton();
        lblStart = new javax.swing.JLabel();
        lblprevious = new javax.swing.JLabel();
        lblnext = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lblAns3 = new javax.swing.JLabel();
        lblAns2 = new javax.swing.JLabel();
        lblAns1 = new javax.swing.JLabel();
        lblAns4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();

        lblEnd1.setBackground(new java.awt.Color(153, 153, 153));
        lblEnd1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        lblEnd1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEnd1.setText("end exam");
        lblEnd1.setOpaque(true);
        lblEnd1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEnd1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblEnd1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblEnd1MouseExited(evt);
            }
        });

        lblStart1.setBackground(new java.awt.Color(153, 153, 153));
        lblStart1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        lblStart1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStart1.setText("start exam");
        lblStart1.setOpaque(true);
        lblStart1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblStart1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblStart1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblStart1MouseExited(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/fFWufhT-white-desktop-background.jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setMinimumSize(new java.awt.Dimension(1366, 760));
        jPanel1.setPreferredSize(new java.awt.Dimension(1366, 768));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/minimize.png"))); // NOI18N
        jLabel22.setToolTipText("Minimize");
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 0, 40, 50));

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("X");
        jLabel23.setToolTipText("Exit");
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 0, 40, 50));

        lblEnd.setBackground(new java.awt.Color(153, 153, 153));
        lblEnd.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        lblEnd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEnd.setText("end exam");
        lblEnd.setOpaque(true);
        lblEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEndMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblEndMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblEndMouseExited(evt);
            }
        });
        jPanel1.add(lblEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 690, 150, 50));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("num of question");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 200, 40));

        lblQuestionNum.setFont(new java.awt.Font("Segoe UI Light", 0, 28)); // NOI18N
        jPanel2.add(lblQuestionNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 80, 40));

        jLabel16.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("time remaining");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 200, 40));

        lblTime.setFont(new java.awt.Font("Segoe UI Light", 0, 28)); // NOI18N
        jPanel2.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, 60, 40));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel2.setText("min");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 10, 60, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 890, 60));

        lblCancel.setBackground(new java.awt.Color(153, 153, 153));
        lblCancel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        lblCancel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCancel.setText("cancel");
        lblCancel.setOpaque(true);
        lblCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCancelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCancelMouseExited(evt);
            }
        });
        jPanel1.add(lblCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 690, 150, 50));

        buttonGroup1.add(rbtnAns1);
        rbtnAns1.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        rbtnAns1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnAns1ItemStateChanged(evt);
            }
        });
        rbtnAns1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAns1ActionPerformed(evt);
            }
        });
        jPanel1.add(rbtnAns1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 360, 30, -1));

        buttonGroup1.add(rbtnAns2);
        rbtnAns2.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        rbtnAns2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnAns2ItemStateChanged(evt);
            }
        });
        jPanel1.add(rbtnAns2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 410, 30, -1));

        buttonGroup1.add(rbtnAns4);
        rbtnAns4.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        rbtnAns4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnAns4ItemStateChanged(evt);
            }
        });
        jPanel1.add(rbtnAns4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 510, 30, -1));

        buttonGroup1.add(rbtnAns3);
        rbtnAns3.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        rbtnAns3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnAns3ItemStateChanged(evt);
            }
        });
        jPanel1.add(rbtnAns3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 460, 30, -1));

        lblStart.setBackground(new java.awt.Color(153, 153, 153));
        lblStart.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        lblStart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStart.setText("start exam");
        lblStart.setOpaque(true);
        lblStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblStartMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblStartMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblStartMouseExited(evt);
            }
        });
        jPanel1.add(lblStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 690, 150, 50));

        lblprevious.setBackground(new java.awt.Color(153, 153, 153));
        lblprevious.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        lblprevious.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblprevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/back_1.png"))); // NOI18N
        lblprevious.setText("previous");
        lblprevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblpreviousMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblpreviousMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblpreviousMouseExited(evt);
            }
        });
        jPanel1.add(lblprevious, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 570, 130, 40));

        lblnext.setBackground(new java.awt.Color(153, 153, 153));
        lblnext.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        lblnext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblnext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/next_1.png"))); // NOI18N
        lblnext.setText("next");
        lblnext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblnextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblnextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblnextMouseExited(evt);
            }
        });
        jPanel1.add(lblnext, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 570, 130, 40));

        jScrollPane2.setOpaque(false);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setOpaque(false);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 920, 170));

        lblAns3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jPanel1.add(lblAns3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 460, 830, 30));

        lblAns2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jPanel1.add(lblAns2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 410, 830, 30));

        lblAns1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jPanel1.add(lblAns1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 830, 30));

        lblAns4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jPanel1.add(lblAns4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 510, 830, 30));

        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 170, 190, 330));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/MQy6rhu-white-desktop-background.jpg"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel23MouseClicked

    private void lblEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEndMouseClicked
        endExam();
    }//GEN-LAST:event_lblEndMouseClicked

    private void lblEndMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEndMouseEntered
        lblEnd.setBackground(Color.BLACK);
        lblEnd.setForeground(Color.WHITE);
    }//GEN-LAST:event_lblEndMouseEntered

    private void lblEndMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEndMouseExited
        lblEnd.setBackground(new Color(153, 153, 153));
        lblEnd.setForeground(Color.BLACK);
    }//GEN-LAST:event_lblEndMouseExited

    private void lblCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancelMouseClicked
        this.dispose();
       
    }//GEN-LAST:event_lblCancelMouseClicked

    private void lblCancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancelMouseEntered
        lblCancel.setBackground(Color.BLACK);
        lblCancel.setForeground(Color.WHITE);
    }//GEN-LAST:event_lblCancelMouseEntered

    private void lblCancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancelMouseExited
        lblCancel.setBackground(new Color(153, 153, 153));
        lblCancel.setForeground(Color.BLACK);
    }//GEN-LAST:event_lblCancelMouseExited

    private void lblStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStartMouseClicked
        loadQuestion(qNum);        //start given exam
    }//GEN-LAST:event_lblStartMouseClicked

    private void lblStartMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStartMouseEntered
        lblStart.setBackground(Color.BLACK);
        lblStart.setForeground(Color.WHITE);
    }//GEN-LAST:event_lblStartMouseEntered

    private void lblStartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStartMouseExited
        lblStart.setBackground(new Color(153, 153, 153));
        lblStart.setForeground(Color.BLACK);
    }//GEN-LAST:event_lblStartMouseExited

    private void lblEnd1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEnd1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblEnd1MouseClicked

    private void lblEnd1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEnd1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblEnd1MouseEntered

    private void lblEnd1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEnd1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_lblEnd1MouseExited

    private void lblStart1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStart1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblStart1MouseClicked

    private void lblStart1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStart1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblStart1MouseEntered

    private void lblStart1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblStart1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_lblStart1MouseExited

    private void lblpreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblpreviousMouseClicked
        qNum--;
        loadQuestion(qNum);
    }//GEN-LAST:event_lblpreviousMouseClicked

    private void lblpreviousMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblpreviousMouseEntered
        lblprevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/back.png")));
    }//GEN-LAST:event_lblpreviousMouseEntered

    private void lblpreviousMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblpreviousMouseExited
        lblprevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/back_1.png")));
    }//GEN-LAST:event_lblpreviousMouseExited

    private void lblnextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblnextMouseClicked
        qNum++;
        loadQuestion(qNum);
    }//GEN-LAST:event_lblnextMouseClicked

    private void lblnextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblnextMouseEntered
        lblnext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/next.png")));
    }//GEN-LAST:event_lblnextMouseEntered

    private void lblnextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblnextMouseExited
        lblnext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/es/images/next_1.png")));
    }//GEN-LAST:event_lblnextMouseExited

    private void rbtnAns1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAns1ActionPerformed
        // getAnswer(qNum);

    }//GEN-LAST:event_rbtnAns1ActionPerformed

    private void rbtnAns2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnAns2ItemStateChanged
        getAnswer(qNum);  // TODO add your handling code here:
    }//GEN-LAST:event_rbtnAns2ItemStateChanged

    private void rbtnAns3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnAns3ItemStateChanged
        getAnswer(qNum);        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnAns3ItemStateChanged

    private void rbtnAns4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnAns4ItemStateChanged
        getAnswer(qNum);        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnAns4ItemStateChanged

    private void rbtnAns1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnAns1ItemStateChanged
        getAnswer(qNum);   // TODO add your handling code here:
    }//GEN-LAST:event_rbtnAns1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamPaperForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamPaperForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamPaperForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamPaperForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblAns1;
    private javax.swing.JLabel lblAns2;
    private javax.swing.JLabel lblAns3;
    private javax.swing.JLabel lblAns4;
    private javax.swing.JLabel lblCancel;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblEnd1;
    private javax.swing.JLabel lblQuestionNum;
    private javax.swing.JLabel lblStart;
    private javax.swing.JLabel lblStart1;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblnext;
    private javax.swing.JLabel lblprevious;
    private javax.swing.JRadioButton rbtnAns1;
    private javax.swing.JRadioButton rbtnAns2;
    private javax.swing.JRadioButton rbtnAns3;
    private javax.swing.JRadioButton rbtnAns4;
    // End of variables declaration//GEN-END:variables

    private void startExam() {
        try {
            int questionCount = examDTO.getEasyQ() + examDTO.getHardQ() + examDTO.getMediumQ();
            ExamDetailsController detailsController = ServerConnector.getServerConnector().getExamDetailsController();
            if (examPaperList.size() == questionCount) {
                for (ExamDetailsDTO examPaperList1 : examPaperList) {
                    boolean add = detailsController.addExamDetail(examPaperList1);//exam paper details 
                    if (add) {
                      //  JOptionPane.showMessageDialog(this, examPaperList1.getQuestionDTO().getQid());
                    }
                }
            }
//           ExamDetailsDTO dTO = examPaperList.get(0);
//            jTextArea1.append(dTO.getQuestionDTO().getQuestion());
//            OptionController optionController = ServerConnector.getServerConnector().getOptionController();
//            for (int i = 1; i < 5; i++) {
//                OptionDTO optionDTO = optionController.searchOption(dTO.getQuestionDTO().getQid() + "0" + i);
//                optionList.add(optionDTO);
//                System.out.println(""+optionDTO.getOption());
//
//            }
//            rbtnAns1.setText(optionList.get(0).getOption());
//            rbtn2.setText(optionList.get(1).getOption());
//            rbtnAns3.setText(optionList.get(2).getOption());
//            rbtn4.setText(optionList.get(3).getOption());
        } catch (NotBoundException | ClassNotFoundException | ParseException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void saveExam(String eid) {
        try {
            int countH = 0, countM = 0, countE = 0;
            QuestionController questionController = ServerConnector.getServerConnector().getQuestionController();
            HashMap<Integer, QuestionDTO> hlist = questionController.getRandomQuestion(examDTO.getSubject());
            Object[] crunchifyKeys = hlist.keySet().toArray();
            Object key = crunchifyKeys[new Random().nextInt(crunchifyKeys.length)];
            java.util.List<Map.Entry<Integer, QuestionDTO>> list = new ArrayList<Map.Entry<Integer, QuestionDTO>>(hlist.entrySet());//create randoms
            Collections.shuffle(list);
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Date date = new Date();
            String d = dateFormat.format(date); //2016/11/16
            int qCount = 1;
            for (Map.Entry<Integer, QuestionDTO> entry : list) {
                //JOptionPane.showMessageDialog(this, entry.getValue());
                if (entry.getValue().getQuestionState().equals("easy")) {//choose question weight
                    if (countE < examDTO.getEasyQ()) {
                        examPaperList.add(new ExamDetailsDTO(paprID, paprID + "Q" + qCount, examDTO, entry.getValue(), d));
                        countE++;
                        qCount++;
                    }
                } else if (entry.getValue().getQuestionState().equals("medium")) {
                    if (countM < examDTO.getMediumQ()) {
                        examPaperList.add(new ExamDetailsDTO(paprID, paprID + "Q" + qCount, examDTO, entry.getValue(), d));
                        countM++;
                        qCount++;
                    }
                } else if (entry.getValue().getQuestionState().equals("hard")) {
                    if (countH < examDTO.getHardQ()) {
                        examPaperList.add(new ExamDetailsDTO(paprID, paprID + "Q" + qCount, examDTO, entry.getValue(), d));
                        countH++;
                        qCount++;
                    }
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        startExam();

    }

    private void getPaperID() {
        try {
            ExamDetailsController detailsController = ServerConnector.getServerConnector().getExamDetailsController();
            String lastID = detailsController.getLastPaperID();
            String qus[] = lastID.split("P");
            int q = Integer.parseInt(qus[1]) + 1;//get paper id
            paprID = "P" + q;
        } catch (NotBoundException | ClassNotFoundException | ParseException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadQuestion(int qnum) {
        buttonGroup1.clearSelection();//question load to ui

        if (qnum < allQuestion) {
            if (qnum == 0) {
                lblprevious.setVisible(false);
            } else {
                lblprevious.setVisible(true);
            }
            lblnext.setVisible(true);
            ExamDetailsDTO dTO = examPaperList.get(qnum);
            jTextArea1.setText((qnum+1) + "\n" + dTO.getQuestionDTO().getQuestion());
            /* OptionController optionController = ServerConnector.getServerConnector().getOptionController();
             for (int i = 1; i < 5; i++) {
             OptionDTO optionDTO = optionController.searchOption(dTO.getQuestionDTO().getQid() + "O" + i);
             optionList.add(optionDTO);
             System.out.println("" + optionDTO.getOption());
             }*/
            optionList = getOptions(qnum);
            if ((qnum + 1) == allQuestion) {
               // JOptionPane.showMessageDialog(this, qnum + " " + allQuestion);
                lblnext.setVisible(false);
            }

            // JOptionPane.showMessageDialog(this, "load question");
        } else {

            lblEnd.setVisible(true);

        }

    }

    private void content() {
        saveExam(examDTO.getEid());
        allQuestion = examDTO.getEasyQ() + examDTO.getHardQ() + examDTO.getMediumQ();
        lblQuestionNum.setText(examDTO.getEasyQ() + examDTO.getHardQ() + examDTO.getMediumQ() + "");
        lblTime.setText(examDTO.getTime());
        setLocationRelativeTo(null);
        // lblEnd.setVisible(false);

    }

    private ArrayList<OptionDTO> getOptions(int qnum) {

        try {
            ExamDetailsDTO dTO = examPaperList.get(qnum);
            OptionController optionController = ServerConnector.getServerConnector().getOptionController();
            for (int i = 1; i <= 4; i++) {
                OptionDTO optionDTO = optionController.searchOption(dTO.getQuestionDTO().getQid() + "O" + (i));
                options[i - 1] = optionDTO.getOid();
                setOption[i - 1] = optionDTO.getOption();
                optionList.add(optionDTO);
            }
            lblAns1.setText(setOption[0]);//set answers
            lblAns2.setText(setOption[1]);
            lblAns3.setText(setOption[2]);
            lblAns4.setText(setOption[3]);
            writeAnswerOnFile(dTO.getQuestionDTO().getQid(), "0");

        } catch (NotBoundException | ParseException | ClassNotFoundException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return optionList;
    }

    private void getAnswer(int qnum) {
        ExamDetailsDTO dTO = examPaperList.get(qnum);
        String question = dTO.getQuestionDTO().getQid();
        String option = "0";
//        JOptionPane.showMessageDialog(this, optionList.get(0).getOption());
        if (rbtnAns1.isSelected()) {
            option = options[0];
        } else if (rbtnAns2.isSelected()) {
            option = options[1];
        } else if (rbtnAns3.isSelected()) {
            option = options[2];
        } else if (rbtnAns4.isSelected()) {
            option = options[3];
        } else {
            System.out.println("no option found");
          //  addToList(qnum);
        }
        if (!option.equals("0")) {
            writeAnswerOnFile(question, option);
        }

    }

    private void writeAnswerOnFile(String question, String option) {
        try {
            TemporaryDTO temporaryDTO = new TemporaryDTO(question, option);
            TemporaryController temporaryController = ServerConnector.getServerConnector().getTemporaryController();
            TemporaryDTO dTO = temporaryController.searchQID(question);
            if (dTO == null) {
                temporaryController.addTemporaryDetail(temporaryDTO);
            } else {
                temporaryController.updateQID(temporaryDTO);
            }
        } catch (NotBoundException | ClassNotFoundException | ParseException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void endExam() {
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            TemporaryController temporaryController = ServerConnector.getServerConnector().getTemporaryController();
            if (qNum > allQuestion) {
                for (int i = 0; i < allQuestion; i++) {
                    ExamDetailsDTO examPaperList1 = examPaperList.get(i);
                    AnswerDTO answerDTO = answerController.searchAnswer(examPaperList1.getQuestionDTO().getQid());
                    TemporaryDTO temporaryDTO = temporaryController.searchQID(examPaperList1.getQuestionDTO().getQid());
                    if (answerDTO.getOid().equals(temporaryDTO.getOid())) {
                        marksP++;
                    } else {
                        marksN++;
                    }
                }
            } else {
                for (int i = 0; i < qNum; i++) {
                    ExamDetailsDTO examPaperList1 = examPaperList.get(i);

                    AnswerDTO answerDTO = answerController.searchAnswer(examPaperList1.getQuestionDTO().getQid());
                    TemporaryDTO temporaryDTO = temporaryController.searchQID(examPaperList1.getQuestionDTO().getQid());

                    if (answerDTO.getOid().equals(temporaryDTO.getOid())) {
                        marksP++;
                    } else {
                        marksN++;
                    }
                }
                System.out.println(marksN + marksP);
               // JOptionPane.showMessageDialog(this, marksN);
                new FinalMarksForm(paprID, marksP, studentDTO, examDTO).setVisible(true);
                this.dispose();
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(ExamPaperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addToList(int qnum) {
        listModel=new DefaultListModel<>();
        listModel.addElement("Question"+(qnum+1));
    }
}
